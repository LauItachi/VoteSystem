package cn.hyperchain.application;

import cn.hyperchain.application.common.utils.Logger;
import cn.qsnark.sdk.exception.TxException;
import cn.qsnark.sdk.rpc.QsnarkAPI;
import cn.qsnark.sdk.rpc.function.FuncParamReal;
import cn.qsnark.sdk.rpc.function.FunctionDecode;
import cn.qsnark.sdk.rpc.returns.*;
import org.bouncycastle.pqc.math.linearalgebra.ByteUtils;
import org.junit.Test;

import java.io.IOException;
import java.io.UnsupportedEncodingException;


/**
 * @author sunligang
 * @date 2018/07/05
 */
public class QsnarkTest {
    private static QsnarkAPI api = new QsnarkAPI();

    private static Logger logger = Logger.Builder.getLogger(QsnarkTest.class);

    /**
     * 从开发者平台获取token，当然也可以通过sdk api获取
     */
    private final static String ACCESS_TOKEN = "FMCMAX24MFGN3CZUXPDBAA";
    /**
     * hyperchain 账户地址
     */
    private final static String ADDRESS = "4edf61ac2971eb3a69be6bc12fd113576f4747eb";
    private final static String BIN = "0x6060604052610ce4600355610d49600455610d4a600555610d4b600655610d4c600755610d4d600855341561003357600080fd5b604051602080610961833981016040528080519150505b60018190555b505b610900806100616000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416635a4f459a8114610053578063649f89a514610080578063aaf60c9a146100a8575b600080fd5b341561005e57600080fd5b61006e60043560243515156100d0565b60405190815260200160405180910390f35b341561008b57600080fd5b61006e6004356101ab565b60405190815260200160405180910390f35b34156100b357600080fd5b61006e60043561025a565b60405190815260200160405180910390f35b600080600060085491506000858154811015156100e957fe5b906000526020600020906006020160005b50600581015490915060ff1615610199576004810180546001810161011f8382610560565b91600052602060002090602091828204019190065b81548715156101009290920a91820260ff90920219161790555060038101805460018101610162838261059a565b916000526020600020900160005b8154600160a060020a033381166101009390930a9283029202191617905550600354915061019f565b60075491505b8192505b505092915050565b600080600060085491506000848154811015156101c457fe5b906000526020600020906006020160005b50600181015490915033600160a060020a039081169116146101fb57600454915061024d565b600581015460ff16151561021357600754915061024d565b6001546003906002025b04816003018054905011801561023757506102378461038e565b5b1561024757600554915061024d565b60065491505b5b5b8192505b5050919050565b6000806102656105c4565b61026d6105c4565b6102756105e8565b600854935060c060405190810160409081526002805460018082019092558352600160a060020a0333166020840152908201889052606082018590526080820184905260a0820181905260008054929350919081016102d4838261062b565b916000526020600020906006020160005b50829081518155602082015160018201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790556040820151600282015560608201518160030190805161034492916020019061065d565b5060808201518160040190805161035f9291602001906106d2565b5060a0820151600591909101805460ff1916911515919091179055505060035494508493505b50505050919050565b600080600061039b6105e8565b6103a36105c4565b60008060009550600094506000888154811015156103bd57fe5b906000526020600020906006020160005b5060c06040519081016040908152825482526001830154600160a060020a0316602080840191909152600284015482840152600384018054939493606086019391929091828202909101905190810160405280929190818152602001828054801561046257602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610444575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156104da57602002820191906000526020600020906000905b825461010083900a900460ff1615158152602060019283018181049485019490930390920291018084116104a95790505b50505091835250506005919091015460ff16151560209091015293506060840151925082519150600090505b81811015610542578360800151818151811061051e57fe5b90602001906020020151151560011415610539576001909401935b5b600101610506565b84820385111561055157600195505b8596505b505050505050919050565b81548183558181151161059457601f016020900481601f016020900483600052602060002091820191016105949190610777565b5b505050565b81548183558181151161059457600083815260209020610594918101908301610777565b5b505050565b60206040519081016040526000815290565b60206040519081016040526000815290565b60c0604051908101604090815260008083526020830181905290820152606081016106116105c4565b815260200161061e6105c4565b8152600060209091015290565b8154818355818115116105945760060281600602836000526020600020918201910161059491906107bc565b5b505050565b8280548282559060005260206000209081019282156106c1579160200282015b828111156106c1578251825473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03919091161782556020929092019160019091019061067d565b5b506106ce92915061082c565b5090565b82805482825590600052602060002090601f016020900481019282156107675791602002820160005b8382111561073857835183826101000a81548160ff02191690831515021790555092602001926001016020816000010492830192600103026106fb565b80156107655782816101000a81549060ff0219169055600101602081600001049283019260010302610738565b505b506106ce929150610864565b5090565b61079591905b808211156106ce576000815560010161077d565b5090565b90565b60206040519081016040526000815290565b60206040519081016040526000815290565b61079591905b808211156106ce57600080825560018201805473ffffffffffffffffffffffffffffffffffffffff19169055600282018190556108026003830182610889565b6108106004830160006108ab565b5060058101805460ff191690556006016107c2565b5090565b90565b61079591905b808211156106ce57805473ffffffffffffffffffffffffffffffffffffffff19168155600101610832565b5090565b90565b61079591905b808211156106ce57805460ff1916815560010161086a565b5090565b90565b50805460008255906000526020600020908101906108a79190610777565b5b50565b50805460008255601f0160209004906000526020600020908101906108a79190610777565b5b505600a165627a7a72305820e6a3e638737e4fd6b1e3297146a584f1281c0da424b372d85ca747b6128baea30029";
    private final static String ABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"voteId\",\"type\":\"uint256\"},{\"name\":\"choice\",\"type\":\"bool\"}],\"name\":\"voting\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"voteId\",\"type\":\"uint256\"}],\"name\":\"endVoting\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content\",\"type\":\"bytes32\"}],\"name\":\"postVote\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"s\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"}]";
    private final static String CONTRACT_ADDRESS = "0x7b509cf9c9b431b38acaaadb39defd6a206e222a";

    /**
     * 获取Token
     */
    @Test
    public void getToken() throws Exception{
        GetTokenReturn getTokenReturn = api.getAccess_Token(
                "21bb6586-a9df-4990-816b-05330501306f",//AppKey
                "Bh58879x12Tkm33BR7ws2Tm5Zj1y28Q2",//AppSecret
                "13588334966",
                "12qwas");
        logger.info(getTokenReturn.getCode(),
                getTokenReturn.getAccess_token(),
                getTokenReturn.getRefresh_token());
    }

    /**
     * 创建账户
     */
    @Test
    public void createAccount() throws Exception {
        CreteAccountReturn creteAccountReturn =
                api.createAccount(ACCESS_TOKEN);
        logger.info(creteAccountReturn.getCode(),
                creteAccountReturn.getAddress(),
                creteAccountReturn.getId(),
                creteAccountReturn.getStatus(),
                creteAccountReturn.getTime());
    }


    @Test
    public void compile() throws IOException {
        String s = "contract Accumulator{    uint32 sum = 0;   function increment(){         sum = sum + 1;     }      function getSum() returns(uint32){         return sum;     }   function add(uint32 num1,uint32 num2) {         sum = sum+num1+num2;     } }";
        CompileReturn compileReturn = api.compileContract(ACCESS_TOKEN, s);
    }

    /**
     * 合约部署
     */
    @Test
    public void deploy() throws IOException, InterruptedException {
        GetTxReciptReturn getTxReciptReturn = api.deploysyncContract(
                ACCESS_TOKEN,
                BIN,
                ADDRESS
        );
        logger.info(getTxReciptReturn);
    }


    /**
     * 合约维护
     */
    @Test
    public void maintainContract() throws IOException {
        //升级合约
        MainTainReturn upgradeMainTainReturn = api.maintainContract(ACCESS_TOKEN, ADDRESS, 1, BIN, CONTRACT_ADDRESS);
        //冻结合约
        MainTainReturn freezeMainTainReturn = api.maintainContract(ACCESS_TOKEN, ADDRESS, 2, BIN, CONTRACT_ADDRESS);
        //解冻合约
        MainTainReturn unFreezeMainTainReturn = api.maintainContract(ACCESS_TOKEN, ADDRESS, 3, BIN, CONTRACT_ADDRESS);
    }


    /**
     * 调用
     */
    @Test
    public void invoke() throws TxException, InterruptedException, IOException {
        FuncParamReal funcParamReal1 = new FuncParamReal("uint32", 456);
        FuncParamReal funcParamReal2 = new FuncParamReal("uint32", 0);
        api.invokeContract(
                ACCESS_TOKEN,
                false,
                ADDRESS,
                CONTRACT_ADDRESS,
                ABI,
                list -> {
                    System.out.println(list);
                },
                "add",
                funcParamReal1,
                funcParamReal2
        );
    }

    @Test
    public void invoke2() throws TxException, InterruptedException, IOException {
        GetTxReciptReturn getTxReciptReturn = api.invokesyncContract(
                ACCESS_TOKEN,
                false,
                ADDRESS,
                CONTRACT_ADDRESS,
                ABI,
                "getSum"
        );
        logger.info(getTxReciptReturn.getRet());
        System.out.println(FunctionDecode.resultDecode("getSum", ABI, "0x00000000000000000000000000000000000000000000000000000000000001c8"));
    }


    @Test
    public void hexToString() throws UnsupportedEncodingException {
        String strDecoded = new String(ByteUtils.fromHexString("1a7468697320494420686173206265656e206f6363757069656421"), "UTF-8");
        logger.info(strDecoded);
    }





}
